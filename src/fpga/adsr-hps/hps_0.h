#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'LEDR', class 'altera_avalon_pio'
 * The macros are prefixed with 'LEDR_'.
 * The prefix is the slave descriptor.
 */
#define LEDR_COMPONENT_TYPE altera_avalon_pio
#define LEDR_COMPONENT_NAME LEDR
#define LEDR_BASE 0x0
#define LEDR_SPAN 16
#define LEDR_END 0xf
#define LEDR_BIT_CLEARING_EDGE_REGISTER 0
#define LEDR_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LEDR_CAPTURE 0
#define LEDR_DATA_WIDTH 10
#define LEDR_DO_TEST_BENCH_WIRING 0
#define LEDR_DRIVEN_SIM_VALUE 0
#define LEDR_EDGE_TYPE NONE
#define LEDR_FREQ 100000000
#define LEDR_HAS_IN 0
#define LEDR_HAS_OUT 1
#define LEDR_HAS_TRI 0
#define LEDR_IRQ_TYPE NONE
#define LEDR_RESET_VALUE 1023

/*
 * Macros for device 'HEX5_HEX4', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX5_HEX4_'.
 * The prefix is the slave descriptor.
 */
#define HEX5_HEX4_COMPONENT_TYPE altera_avalon_pio
#define HEX5_HEX4_COMPONENT_NAME HEX5_HEX4
#define HEX5_HEX4_BASE 0x20
#define HEX5_HEX4_SPAN 16
#define HEX5_HEX4_END 0x2f
#define HEX5_HEX4_BIT_CLEARING_EDGE_REGISTER 0
#define HEX5_HEX4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX5_HEX4_CAPTURE 0
#define HEX5_HEX4_DATA_WIDTH 16
#define HEX5_HEX4_DO_TEST_BENCH_WIRING 0
#define HEX5_HEX4_DRIVEN_SIM_VALUE 0
#define HEX5_HEX4_EDGE_TYPE NONE
#define HEX5_HEX4_FREQ 100000000
#define HEX5_HEX4_HAS_IN 0
#define HEX5_HEX4_HAS_OUT 1
#define HEX5_HEX4_HAS_TRI 0
#define HEX5_HEX4_IRQ_TYPE NONE
#define HEX5_HEX4_RESET_VALUE 0

/*
 * Macros for device 'HEX3_HEX0', class 'altera_avalon_pio'
 * The macros are prefixed with 'HEX3_HEX0_'.
 * The prefix is the slave descriptor.
 */
#define HEX3_HEX0_COMPONENT_TYPE altera_avalon_pio
#define HEX3_HEX0_COMPONENT_NAME HEX3_HEX0
#define HEX3_HEX0_BASE 0x30
#define HEX3_HEX0_SPAN 16
#define HEX3_HEX0_END 0x3f
#define HEX3_HEX0_BIT_CLEARING_EDGE_REGISTER 0
#define HEX3_HEX0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define HEX3_HEX0_CAPTURE 0
#define HEX3_HEX0_DATA_WIDTH 32
#define HEX3_HEX0_DO_TEST_BENCH_WIRING 0
#define HEX3_HEX0_DRIVEN_SIM_VALUE 0
#define HEX3_HEX0_EDGE_TYPE NONE
#define HEX3_HEX0_FREQ 100000000
#define HEX3_HEX0_HAS_IN 0
#define HEX3_HEX0_HAS_OUT 1
#define HEX3_HEX0_HAS_TRI 0
#define HEX3_HEX0_IRQ_TYPE NONE
#define HEX3_HEX0_RESET_VALUE 0

/*
 * Macros for device 'SW', class 'altera_avalon_pio'
 * The macros are prefixed with 'SW_'.
 * The prefix is the slave descriptor.
 */
#define SW_COMPONENT_TYPE altera_avalon_pio
#define SW_COMPONENT_NAME SW
#define SW_BASE 0x40
#define SW_SPAN 16
#define SW_END 0x4f
#define SW_BIT_CLEARING_EDGE_REGISTER 0
#define SW_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SW_CAPTURE 0
#define SW_DATA_WIDTH 10
#define SW_DO_TEST_BENCH_WIRING 1
#define SW_DRIVEN_SIM_VALUE 0
#define SW_EDGE_TYPE NONE
#define SW_FREQ 100000000
#define SW_HAS_IN 1
#define SW_HAS_OUT 0
#define SW_HAS_TRI 0
#define SW_IRQ_TYPE NONE
#define SW_RESET_VALUE 0

/*
 * Macros for device 'key', class 'altera_avalon_pio'
 * The macros are prefixed with 'KEY_'.
 * The prefix is the slave descriptor.
 */
#define KEY_COMPONENT_TYPE altera_avalon_pio
#define KEY_COMPONENT_NAME key
#define KEY_BASE 0x50
#define KEY_SPAN 16
#define KEY_END 0x5f
#define KEY_BIT_CLEARING_EDGE_REGISTER 1
#define KEY_BIT_MODIFYING_OUTPUT_REGISTER 0
#define KEY_CAPTURE 1
#define KEY_DATA_WIDTH 4
#define KEY_DO_TEST_BENCH_WIRING 1
#define KEY_DRIVEN_SIM_VALUE 0
#define KEY_EDGE_TYPE FALLING
#define KEY_FREQ 100000000
#define KEY_HAS_IN 1
#define KEY_HAS_OUT 0
#define KEY_HAS_TRI 0
#define KEY_IRQ_TYPE EDGE
#define KEY_RESET_VALUE 0

/*
 * Macros for device 'audio_ctrl', class 'altera_avalon_pio'
 * The macros are prefixed with 'AUDIO_CTRL_'.
 * The prefix is the slave descriptor.
 */
#define AUDIO_CTRL_COMPONENT_TYPE altera_avalon_pio
#define AUDIO_CTRL_COMPONENT_NAME audio_ctrl
#define AUDIO_CTRL_BASE 0x100
#define AUDIO_CTRL_SPAN 16
#define AUDIO_CTRL_END 0x10f
#define AUDIO_CTRL_BIT_CLEARING_EDGE_REGISTER 1
#define AUDIO_CTRL_BIT_MODIFYING_OUTPUT_REGISTER 0
#define AUDIO_CTRL_CAPTURE 0
#define AUDIO_CTRL_DATA_WIDTH 16
#define AUDIO_CTRL_DO_TEST_BENCH_WIRING 1
#define AUDIO_CTRL_DRIVEN_SIM_VALUE 0
#define AUDIO_CTRL_EDGE_TYPE NONE
#define AUDIO_CTRL_FREQ 100000000
#define AUDIO_CTRL_HAS_IN 1
#define AUDIO_CTRL_HAS_OUT 0
#define AUDIO_CTRL_HAS_TRI 0
#define AUDIO_CTRL_IRQ_TYPE NONE
#define AUDIO_CTRL_RESET_VALUE 0

/*
 * Macros for device 'audio_input', class 'altera_avalon_pio'
 * The macros are prefixed with 'AUDIO_INPUT_'.
 * The prefix is the slave descriptor.
 */
#define AUDIO_INPUT_COMPONENT_TYPE altera_avalon_pio
#define AUDIO_INPUT_COMPONENT_NAME audio_input
#define AUDIO_INPUT_BASE 0x200
#define AUDIO_INPUT_SPAN 16
#define AUDIO_INPUT_END 0x20f
#define AUDIO_INPUT_BIT_CLEARING_EDGE_REGISTER 1
#define AUDIO_INPUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define AUDIO_INPUT_CAPTURE 0
#define AUDIO_INPUT_DATA_WIDTH 32
#define AUDIO_INPUT_DO_TEST_BENCH_WIRING 1
#define AUDIO_INPUT_DRIVEN_SIM_VALUE 0
#define AUDIO_INPUT_EDGE_TYPE NONE
#define AUDIO_INPUT_FREQ 100000000
#define AUDIO_INPUT_HAS_IN 1
#define AUDIO_INPUT_HAS_OUT 0
#define AUDIO_INPUT_HAS_TRI 0
#define AUDIO_INPUT_IRQ_TYPE NONE
#define AUDIO_INPUT_RESET_VALUE 0

/*
 * Macros for device 'av_config', class 'altera_up_avalon_audio_and_video_config'
 * The macros are prefixed with 'AV_CONFIG_'.
 * The prefix is the slave descriptor.
 */
#define AV_CONFIG_COMPONENT_TYPE altera_up_avalon_audio_and_video_config
#define AV_CONFIG_COMPONENT_NAME av_config
#define AV_CONFIG_BASE 0x3000
#define AV_CONFIG_SPAN 16
#define AV_CONFIG_END 0x300f

/*
 * Macros for device 'audio_subsystem_Audio', class 'altera_up_avalon_audio'
 * The macros are prefixed with 'AUDIO_SUBSYSTEM_AUDIO_'.
 * The prefix is the slave descriptor.
 */
#define AUDIO_SUBSYSTEM_AUDIO_COMPONENT_TYPE altera_up_avalon_audio
#define AUDIO_SUBSYSTEM_AUDIO_COMPONENT_NAME audio_subsystem_Audio
#define AUDIO_SUBSYSTEM_AUDIO_BASE 0x3040
#define AUDIO_SUBSYSTEM_AUDIO_SPAN 16
#define AUDIO_SUBSYSTEM_AUDIO_END 0x304f
#define AUDIO_SUBSYSTEM_AUDIO_IRQ 6


#endif /* _ALTERA_HPS_0_H_ */
